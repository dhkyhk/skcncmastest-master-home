server:
  port: ${running.port:8081}
  shutdown: graceful
  servlet:
    encoding:
      charset: utf-8
      force-response: true

spring:
  profiles:
    active: ${running.profile:local}
#  datasource:
#    driver-class-name: org.postgresql.Driver
#    url: jdbc:postgresql://db-postgres-secmsa-core.cfgq2mm0w8uf.ap-northeast-2.rds.amazonaws.com:5432/postgres
#    username: postgres
#    password: asdfg12345
  #멀티 DB 설정
  # primary db
  datasource:
    primary:
      jdbc-url: jdbc:postgresql://db-postgres-secmsa-core.cfgq2mm0w8uf.ap-northeast-2.rds.amazonaws.com:5432/postgres
      driver-class-name: org.postgresql.Driver
      username: postgres
      password: asdfg12345
#    hibernate:
#      connection:
#        url: jdbc:postgresql://db-postgres-secmsa-core.cfgq2mm0w8uf.ap-northeast-2.rds.amazonaws.com:5432/postgres
#      dialect: org.hibernate.dialect.PostgreSQL9Dialect
#      jdbc.batch_size: 490
#      jdbc.fetch_size: 490                    
#      hbm2ddl.auto: none
#      show_sql: false
#      ddl-auto: none
  # secondary db - 그냥 이전에 사용 했던 DB로 일단 설정하자..
    secondary:
      #jdbc-url: jdbc:postgresql://db-msa-common.cbi24uq0o69d.ap-northeast-2.rds.amazonaws.com:5432/postgres
      jdbc-url: jdbc:postgresql://10.250.140.97:5432/postgres
      driver-class-name: org.postgresql.Driver
      username: postgres
      password: 1q2w3e4r
#    hibernate:
#      connection:
#        url: postgresql://db-msa-common.cbi24uq0o69d.ap-northeast-2.rds.amazonaws.com:5432/postgres
#      dialect: org.hibernate.dialect.PostgreSQL9Dialect
#      jdbc.batch_size: 490
#      jdbc.fetch_size: 490                    
#      hbm2ddl.auto: none
#      show_sql: false
#      ddl-auto: none
#  jpa:
#    database: postgresql
#    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
#    hibernate:
#      ddl-auto: none
#    open-in-view : false #트렌젝션 종료되면 commit 되게.
#    show_sql: true
#    generate-ddl: true
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.PostgreSQL9Dialect




#  datasource:
#    type: com.zaxxer.hikari.HikariDataSource
#    driver-class-name: org.postgresql.Driver
#    jdbcUrl: jdbc:postgresql://db-msa-common.cbi24uq0o69d.ap-northeast-2.rds.amazonaws.com:5432/postgres
#    username: postgres
#    password: asdfg12345
#    hikari:
#      poolName: coreDbPool
#      connectionTimeout: 10
#      maximumPoolSize: 10
#      minimumIdle: 1       

      
#  kafka:
#    name: stockcore
#    producer:
#      bootstrap-servers: inno3t2:4192
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#    consumer:
#      bootstrap-servers: inno3t2:4192
#      group-id: stockcore
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

  messages:
    basename: messages/messages #message.properties 경로  messages 폴더 밑으로 모아 놓음
    encoding: utf-8
    cache-duration: 600 #600초 10분 마다 설정 파일 리로딩.

#카프카 구현 하면 추가하자..
#kafka:
#  send:
#    topic: sampleCChanged
#    group_id: msa3
#  rev:
#    topic: sampleAChanged
#    group_id: msa3

stockcore:
  swagger:
    enabled: true
  auth:
    token: #인증 토큰 정보
      secret: ZmluYW5jZS1tc2EtYmFja2VuZC1qd3Qtc2VjcmV0LWZpbmFuY2UtbXNhLWJhY2tlbmQtand0LXNlY3JldC1maW5hbmNlLW1zYS1iYWNrZW5kLWp3dC1zZWNyZXQK
      valid-minute: 30 #30분


